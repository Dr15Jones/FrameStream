/*
 *  MICO --- a free CORBA implementation
 *  Copyright (C) 1997-98 Kay Roemer & Arno Puder
 *
 *  This file was automatically generated. DO NOT EDIT!
 */

#if !defined(__TMP_H__) || defined(MICO_NO_TOPLEVEL_MODULES)
#define __TMP_H__

#ifndef MICO_NO_TOPLEVEL_MODULES
#include <CORBA.h>
#include <mico/throw.h>
#endif

#ifndef MICO_NO_TOPLEVEL_MODULES
MICO_NAMESPACE_DECL Temp {
#endif

#if !defined(MICO_NO_TOPLEVEL_MODULES) || defined(MICO_MODULE_Temp)


class Simple1;
typedef Simple1 *Simple1_ptr;
typedef Simple1_ptr Simple1Ref;
typedef ObjVar<Simple1> Simple1_var;
typedef Simple1_var Simple1_out;


// Common definitions for interface Simple1
class Simple1 : 
  virtual public CORBA::Object
{
  public:
    virtual ~Simple1();

    #ifdef HAVE_TYPEDEF_OVERLOAD
    typedef Simple1_ptr _ptr_type;
    typedef Simple1_var _var_type;
    #endif

    static Simple1_ptr _narrow( CORBA::Object_ptr obj );
    static Simple1_ptr _narrow( CORBA::AbstractBase_ptr obj );
    static Simple1_ptr _duplicate( Simple1_ptr _obj )
    {
      CORBA::Object::_duplicate (_obj);
      return _obj;
    }

    static Simple1_ptr _nil()
    {
      return 0;
    }

    virtual void *_narrow_helper( const char *repoid );
    static vector<CORBA::Narrow_proto> *_narrow_helpers;
    static bool _narrow_helper2( CORBA::Object_ptr obj );

    virtual void call1() = 0;

  protected:
    Simple1() {};
  private:
    Simple1( const Simple1& );
    void operator=( const Simple1& );
};

MICO_EXPORT_TYPEVAR_DECL CORBA::TypeCodeConst _tc_Simple1;

// Stub for interface Simple1
class Simple1_stub:
  virtual public Simple1
{
  public:
    virtual ~Simple1_stub();
    void call1();

  private:
    void operator=( const Simple1_stub& );
};

class Simple1_skel :
  virtual public StaticMethodDispatcher,
  virtual public Simple1
{
  public:
    Simple1_skel( const CORBA::BOA::ReferenceData & = CORBA::BOA::ReferenceData() );
    virtual ~Simple1_skel();
    Simple1_skel( CORBA::Object_ptr obj );
    virtual bool dispatch( CORBA::StaticServerRequest_ptr _req, CORBA::Environment &_env );
    Simple1_ptr _this();

};

class Simple2;
typedef Simple2 *Simple2_ptr;
typedef Simple2_ptr Simple2Ref;
typedef ObjVar<Simple2> Simple2_var;
typedef Simple2_var Simple2_out;


// Common definitions for interface Simple2
class Simple2 : 
  virtual public ::Temp::Simple1
{
  public:
    virtual ~Simple2();

    #ifdef HAVE_TYPEDEF_OVERLOAD
    typedef Simple2_ptr _ptr_type;
    typedef Simple2_var _var_type;
    #endif

    static Simple2_ptr _narrow( CORBA::Object_ptr obj );
    static Simple2_ptr _narrow( CORBA::AbstractBase_ptr obj );
    static Simple2_ptr _duplicate( Simple2_ptr _obj )
    {
      CORBA::Object::_duplicate (_obj);
      return _obj;
    }

    static Simple2_ptr _nil()
    {
      return 0;
    }

    virtual void *_narrow_helper( const char *repoid );
    static vector<CORBA::Narrow_proto> *_narrow_helpers;
    static bool _narrow_helper2( CORBA::Object_ptr obj );

    virtual void call2() = 0;

  protected:
    Simple2() {};
  private:
    Simple2( const Simple2& );
    void operator=( const Simple2& );
};

MICO_EXPORT_TYPEVAR_DECL CORBA::TypeCodeConst _tc_Simple2;

// Stub for interface Simple2
class Simple2_stub:
  virtual public Simple2,
  virtual public ::Temp::Simple1_stub
{
  public:
    virtual ~Simple2_stub();
    void call2();

  private:
    void operator=( const Simple2_stub& );
};

class Simple2_skel :
  virtual public StaticMethodDispatcher,
  virtual public Simple2
{
  public:
    Simple2_skel( const CORBA::BOA::ReferenceData & = CORBA::BOA::ReferenceData() );
    virtual ~Simple2_skel();
    Simple2_skel( CORBA::Object_ptr obj );
    virtual bool dispatch( CORBA::StaticServerRequest_ptr _req, CORBA::Environment &_env );
    Simple2_ptr _this();

};

#endif // !defined(MICO_NO_TOPLEVEL_MODULES) || defined(MICO_MODULE_Temp)

#ifndef MICO_NO_TOPLEVEL_MODULES

};
#endif



#ifndef MICO_CONF_NO_POA

#endif // MICO_CONF_NO_POA

#if !defined(MICO_NO_TOPLEVEL_MODULES) || defined(MICO_MODULE__GLOBAL)

void operator<<=( CORBA::Any &a, const Temp::Simple1_ptr obj );
void operator<<=( CORBA::Any &a, Temp::Simple1_ptr* obj_ptr );
CORBA::Boolean operator>>=( const CORBA::Any &a, Temp::Simple1_ptr &obj );

extern CORBA::StaticTypeInfo *_marshaller_Temp_Simple1;

void operator<<=( CORBA::Any &a, const Temp::Simple2_ptr obj );
void operator<<=( CORBA::Any &a, Temp::Simple2_ptr* obj_ptr );
CORBA::Boolean operator>>=( const CORBA::Any &a, Temp::Simple2_ptr &obj );

extern CORBA::StaticTypeInfo *_marshaller_Temp_Simple2;

#endif // !defined(MICO_NO_TOPLEVEL_MODULES) || defined(MICO_MODULE__GLOBAL)


#if !defined(MICO_NO_TOPLEVEL_MODULES) && !defined(MICO_IN_GENERATED_CODE)
#include <mico/template_impl.h>
#endif

#endif
